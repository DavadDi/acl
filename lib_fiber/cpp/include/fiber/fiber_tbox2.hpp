#pragma once
#include "fiber_cpp_define.hpp"
#include <list>
#include <vector>
#include <cstdlib>
#include "fiber_mutex.hpp"
#include "fiber_cond.hpp"

namespace acl {

/**
 * 用于协程之间，线程之间以及协程与线程之间的消息通信，通过协程条件变量
 * 及协程事件锁实现
 *
 * 示例：
 *
 * class myobj {
 * public:
 *     myobj() {}
 *     ~myobj() {}
 *
 *     void test() { printf("hello world\r\n"); }
 * };
 *
 * acl::fiber_tbox2<myobj> tbox;
 *
 * void thread_producer() {
 *     myobj o;
 *     tbox.push(o);
 * }
 *
 * void thread_consumer() {
 *     myobj o;

 *     if (tbox.pop(o)) {
 *         o.test();
 *     }
 * }
 */

// The fiber_tbox2 has an object copying process in push/pop which is suitable
// for transfering the object managed by std::shared_ptr.

// The base box2<T> defined in acl_cpp/stdlib/box.hpp, so you must include
// box.hpp first before including fiber_tbox.hpp
template<typename T>
class fiber_tbox2 : public box2<T> {
public:
	/**
	 * 构造方法
	 */
	fiber_tbox2() : capacity_(10000) , off_curr_(0) , off_next_(0) {
		box_ = (T*) malloc(sizeof(T) * capacity_);
	}

	~fiber_tbox2() { free(box_); }

	/**
	 * 清理消息队列中未被消费的消息对象
	 */
	void clear() {
		off_curr_ = off_next_ = 0;
	}

	/**
	 * 发送消息对象
	 * @param t {T} 消息对象
	 * @param notify_first {bool} 如果本参数为 true，则内部添加完消息后
	 *  采用先通知后解锁方式，否则采用先解锁后通知方式，当 fiber_tbox2 对象
	 *  的生存周期比较长时，该参数设为 false 的效率更高，如果 fiber_tbox2
	 *  对象的生存周期较短(如：等待者调用 pop 后直接销毁 fiber_tbox2 对象),
	 *  则本参数应该设为 true，以避免 push 者还没有完全返回前因 fiber_tbox2
	 *  对象被提前销毁而造成内存非法访问
	 * @return {bool}
	 * @override
	 */
	bool push(T t, bool notify_first = true) {
		// 先加锁
		if (! mutex_.lock()) { abort(); }

		if (off_next_ == capacity_) {
			if (off_curr_ >= 10000) {
#if 1
				size_t n = 0;
				for (size_t i = off_curr_; i < off_next_; i++) {
					box_[n++] = box_[i];
				}
#else
				memmove(box_, box_ + off_curr_,
					(off_next_ - off_curr_) * sizeof(T));
#endif

				off_next_ -= off_curr_;
				off_curr_ = 0;
			} else {
				capacity_ += 10000;
				box_ = (T*) realloc(box_, sizeof(T) * capacity_);
			}
		}
#if __cplusplus >= 201103L || defined(USE_CPP11)
		box_[off_next_++] = std::move(t);
#else
		box_[off_next_++] = t;
#endif

		if (notify_first) {
			if (! cond_.notify()) { abort(); }
			if (! mutex_.unlock()) { abort(); }
		} else {
			if (! mutex_.unlock()) { abort(); }
			if (! cond_.notify()) { abort(); }
		}
		return true;
	}

	/**
	 * 接收消息对象
	 * @param t {T&} 当函数 返回 true 时存放结果对象
	 * @param ms {int} >= 0 时设置等待超时时间(毫秒级别)，
	 *  否则永远等待直到读到消息对象或出错
	 * @return {bool} 是否获得消息对象
	 * @override
	 */
	bool pop(T& t, int ms = -1) {
		if (! mutex_.lock()) { abort(); }
		while (true) {
			if (peek_obj(t)) {
				if (! mutex_.unlock()) { abort(); }
				return true;
			}

			if (!cond_.wait(mutex_, ms) && ms >= 0) {
				if (! mutex_.unlock()) { abort(); }
				return false;
			}
		}
	}

	//@override
	size_t pop(std::vector<T>& out, size_t max, int ms) {
		size_t n = 0;
		if (! mutex_.lock()) { abort(); }
		while (true) {
			T t;
			if (peek_obj(t)) {
				out.push_back(t);
				n++;
				if (max > 0 && n >= max) {
					if (! mutex_.unlock()) { abort(); }
					return n;
				}
				continue;
			}
			if (n > 0) {
				if (! mutex_.lock()) { abort(); }
				return n;
			}
			if (! cond_.wait(mutex_, ms) && ms >= 0) {
				if (! mutex_.lock()) { abort(); }
				return n;
			}
		}
	}

	/**
	 * 返回当前存在于消息队列中的消息数量
	 * @return {size_t}
	 * @override
	 */
	size_t size() const {
		return off_next_ - off_curr_;
	}

	// @override
	bool has_null() const {
		return true;
	}

public:
	void lock() {
		if (! mutex_.lock()) { abort(); }
	}

	void unlock() {
		if (! mutex_.unlock()) { abort(); }
	}

private:
	fiber_tbox2(const fiber_tbox2&) {}
	const fiber_tbox2& operator=(const fiber_tbox2&);

private:
	T*           box_;
	size_t       capacity_;
	size_t       off_curr_;
	size_t       off_next_;
	fiber_mutex  mutex_;
	fiber_cond   cond_;

	bool peek_obj(T& t) {
		if (off_curr_ == off_next_) {
			if (off_curr_ > 0) {
				off_curr_ = off_next_ = 0;
			}
			return false;
		}

#if __cplusplus >= 201103L || defined(USE_CPP11)
		t = std::move(box_[off_curr_++]);
#else
		t = box_[off_curr_++];
#endif
		return true;
	}
};

} // namespace acl
